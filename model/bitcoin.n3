# -*- Mode: n3 -*-

# Just because it is possible syntactically, doesn't make this a good
# idea, but still it gives a concise definition of what is to be done.

@prefix dc:              <http://purl.org/dc/elements/1.1/> .
<> dc:updated "02-SEP-2013" .

@prefix btc:          <https://btc.not.org#> .

# Symbols from the Common Lisp COMMON-LISP and KEYWORD packages.
@prefix cl:           <urn:common-lisp/packages/common-lisp#> .
@prefix :             <urn:common-lisp/packages/keyword#> .

# Model of cryptographic algorithms implementations.
@prefix crypto:       <https://crypto.not.org#> .

# Description of delayed future computations, currently expressed as
# Common Lisp s-expr
@prefix future:       <https://future.not.org#> .

# ??? Some way to do #include like directives?
@prefix rdf:         <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:        <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:         <http://www.w3.org/2001/XMLSchema#> .

@prefix ansi-c:       <urn:ansi-c/types#> .

# The Cert ontology as used by WebID
@prefix cert:        <http://www.w3.org/ns/auth/cert#> .

<> 
   rdfs:seeAlso      <https://en.bitcoin.it/wiki/Protocol_specification> .

btc:address 
  a (_:version 
     _:key-hash 
     _:checksum 
     _:address) .

# XXX
@prefix org.not:        <https://not.org#crypto> .
btc:address org.not:note crypto:bigendian .

# XXX Needs to be scoped to btc:address, but it feels wrong to mix
#     anonymous nodes here, as they may be anywhere in the document.

[btc:address _:version]
  cl:type-of "(unsigned-byte 8)" ;
  ansi-c:type "uint32_t" ;
  rdfs:label "1 byte of 0 (zero); on the test network, this is 1 byte of 111." . # "111" in binary?

[btc:address _:key-hash]
  future:yields
           (cl:concatenate 
              (cl:quote "string")
              _:version 
              (crypto:ripemd (crypto:sha256 (crypto:sha256 _:public-key)))) ;
  a xsd:string ;
  cl:type-of "(simple-base-string *)" . # XXX what is the cardinality?

[btc:address _:checksum ]
  future:yields
    (cl:subseq (crypto:double-sha-256 _:key-hash)
               0 4) ;
  cl:type-of "(vector (unsigned-byte 8) 4)" .

[btc:address _:address ]
  future:yields
    (crypto:base-58-encode (cl:concatenate (cl:quote "string") 
                             _:key-hash
                             _:checksum)) .


# XXX How to do CL quotes: is (cl:quote "string") the best way we can
#     transcribe 'string?

btc:network-node  
  a (_:time 
     _:services 
     _:ip) .

# [btc:network-node _:ip]  can be IP4 or IP6

[btc:network-node _:ip] a crypto:big-endian.

<> rdfs:label "Almost all integers are encoded in little endian. Only IP or port number are encoded big endian." .


btc:message 
  a (_:magic 
     _:command
     _:length
     _:checksum
     _:payload ) .

_:magic 
  cl:type-of "(integer 2147483648)" ;
  rdfs:label """"Magic value indicating message origin network, and used to 
                 seek to next message when stream state is unknown""" .


# _:magic is practically a sparse enumeration of these values
btc:main     :magic     "0xD9B4BEF9" . #    F9 BE B4 D9
btc:testnet  :magic     "0xDAB5BFFA" . #    FA BF B5 DA
btc:testnet3 :magic     "0x0709110B" . #    0B 11 09 07
btc:namecoin :magic     "0xFEB4BEF9" . #    F9 BE B4 FE 

_:command
  cl:type-of "(simple-base-string 12)" ;
  cl:assert _:null-padded-string ;
  rdf:label """ASCII string identifying the packet content, NULL padded 
               (non-NULL padding results in packet rejected)""" .

[btc:message _:length]
  rdfs:label "Length of payload in number of bytes" ;
  cl:type-of  "(cl:make-array 4 :element-type 'unsigned-byte))" .  

[btc:message _:checksum] 
  cl:type-of "(cl:make-array 4 :element-type 'unsigned-byte))" ;             
  rdfs:label "First 4 bytes of sha256(sha256(payload))" ;
  future:yields
     (cl:subseq (crypto:sha256 (crypto:sha256 [btc:message _:payload]))
                0 4) .

[btc:message _:payload]
   cl:type-of "(vector unsigned-byte *)" ;
   rdfs:label "The actual data" .
                          
btc:block-header
  a (_:version
     _:previous-block
     _:merkle-root
     _:timestamp
     _:bits
     _:nonce
     _:transaction-count) .

<urn:bitcoinj.not.org> 
  rdfs:seeAlso <http://duckduckgo.com?q=bitcoinj> ;
  rdfs:seeAlso <file:bitcoinj.asd> .

btc:network-address
  a (_:time
     _:services
     _:ip
     _:port) .

[btc:network-address _:time] 
  ansi-c:type "uint32_t" ;
  rdfs:label "the Time (version >= 31402)". 

[btc:network-address _:services] 
   ansi-c:type "uint64_t" ;
   rdfs:label "same service(s) listed in version" .

[btc:network-address _:ip] 
  cl:type-of "(cl:make-array 16 :element-type 'unsigned-byte))" .
     
[btc:network-address _:port] 
  ansi-c:type "uint16_t" .

btc:inventory-vector
  a (_:type
     _:hash) .

[btc:inventory-vector _:type] 
  ansi-c:type "u32int_t" ;
  rdfs:comment """
Value   Name                    Description                 
0     ERROR     Any data of with this number may be ignored 
1     MSG_TX    Hash is related to a transaction            
2     MSG_BLOCK Hash is related to a data block             
""" .

[btc:inventory-vector _:hash] 
  ansi-c:type "char[32]" .

btc:block-header
  a (_:version
     _:previous-block        
     _:merkle-root
     _:timestamp
     _:bits
     _:nonce
     _:txn-count) ;
  rdfs:comment """
Field Size Description Data type                                               Comments                                               
4          version     uint32_t  Block version information, based upon the software version creating this block                       
32         prev_block  char[32]  The hash value of the previous block this particular block references                                
32         merkle_root char[32]  The reference to a Merkle tree collection which is a hash of all transactions related to this block  
4          timestamp   uint32_t  A timestamp recording when this block was created (Will overflow in 2106[2])                         
4          bits        uint32_t  The calculated difficulty target being used for this block                                           
4          nonce       uint32_t  The nonce used to generate this blockâ€¦ to allow variations of the header and compute different hashes
1          txn_count   var_int   Number of transaction entries, this value is always 0                                                
""" .

[btc:block-header _:version] 
  ansi-c:type "uint32_t" .

[btc:block-header _:previous-block]
  ansi-c:type "char[32]" .

[btc:block-header _:merkle-root]
  ansi-c:type "char[32]".

[btc:block-header _:timestamp]
  ansi-c:type "uint32_t".

[btc:block-header _:bits]
  ansi-c:type "uint32_t".

[btc:block-header _:nonce]
  ansi-c:type "uint32_t".

[btc:block-header _:txn-count]
  cl:type-of "(integer 2147483648)" ;
  rdfs:comment "Always 0" .

btc:payload     
  a (_:version
     _:services
     _:timestamp
     _:address-receiver
     _:address-sender
     _:nonce
     _:user-agent
     _:start-height
     _:relay) ;
  rdfs:comment """

  Field   Description    Data                                                     Comments                                                  
  Size                   type                                                                                                               
4         version      int32_t  Identifies protocol version being used by the node                                                          
8         services     uint64_t bitfield of features to be enabled for this connection                                                      
8         timestamp    int64_t  standard UNIX timestamp in seconds                                                                          
26        addr_recv    net_addr The network address of the node receiving this message                                                      
version >= 106                                                                                                                              
26        addr_from    net_addr The network address of the node emitting this message                                                       
8         nonce        uint64_t Node random nonce, randomly generated every time a version packet is sent. This nonce is used to detect     
                                connections to self.                                                                                        
 ?        user_agent   var_str  User Agent (0x00 if string is 0 bytes long)                                                                 
4         start_height int32_t  The last block received by the emitting node                                                                
1         relay        bool     Whether the remote peer should announce relayed transactions or not, see BIP 0037, since version >= 70001   
""" .
### ECDSA

@prefix btc-ecdsa:       <https://crypto.not.org/btc#ecdsa> .

btc-ecdsa:source rdfs:comment "https://github.com/bitcoin/secp256k1/blob/master/src/secp256k1.c" .
                  
btc-ecdsa:verify
        rdfs:comment
"""
int secp256k1_ecdsa_verify(const unsigned char *msg32, const unsigned char *sig, int siglen, const unsigned char *pubkey, int pubkeylen)
""" .

btc-ecdsa:sign
        rdfs:comment
"""
const unsigned char *msg32, unsigned char *signature, int *signaturelen, const unsigned char *seckey, secp256k1_nonce_function_t noncefp, const void* noncedata
"""  .


btc-ecdsa:rfc6979-nonce
        rdfs:comment
"""
nonce_function_rfc6979(unsigned char *nonce32, const unsigned char *msg32, const unsigned char *key32, unsigned int counter, const void *data)
""" .

btc-ecdsa:p
  a xsd:integer;
  future:yields 
"""(- (expt 2 256) (expt 2 32) (expt 2 9) (expt 2 8) (expt 2 7) (expt 2 6) (expt 2 4) 1))""".

btc-ecdsa:a
  a xsd:integer;
  future:yields 0.

btc-ecdsa:g 
  a xsd:integer;
  future:yields
"""
0479BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798483ADA7726A3C4655DA4FBFC0E1108A8 FD17B448A68554199C47D08FFB10D4B8
""" .

